#!/usr/bin/env python3

import sys

def main():
    if len(sys.argv) != 4:
        print("./cpu_id <irq_start> <irq_end> <no_cpus>")
        print("./cpu_id 235 266 3")
        sys.exit(1)

    irq_start = int(sys.argv[1])
    irq_end = int(sys.argv[2])
    no_cpus = int(sys.argv[3])

    cpus = irq_to_cpu(irq_start, irq_end)

    count = 0
    for i in range(no_cpus):
        print(cpus[i], end="")
        if i+1 != no_cpus:
            print(",", end="")

        count += 1


def irq_to_cpu(irq_start, irq_end):
    cpus_return = []
    for i in range(irq_start, irq_end+1):
        raw = open("/proc/irq/{}/smp_affinity".format(i)).read()
        hexadecimal = raw.replace("\n", "")
        binary = bin(int(hexadecimal, 16))
        cpus = bin_mask_to_index(str(binary)[2:])

        cpus_str = map(str, cpus)
        cpus_str_h = ",".join(cpus_str)
        cpus_return.append(cpus_str_h)

    return cpus_return

def bin_mask_to_index(mask):
    idx = []

    mask_rev = mask[::-1]
    count = 0

    for s in mask_rev:
        if s == "1":
            idx.append(count)

        count += 1

    return idx

if __name__ == "__main__":
    main()

